@model PosWebAppCommon.Models.Item
@{
    ViewData["Title"] = "Add New Item";
}

<div class="container mt-4">
    <h2>Add New Item</h2>
    <hr />
    <div class="row">
        <div class="col-md-6">
            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="mb-3">
                    <label asp-for="ItemName" class="form-label"></label>
                    <input asp-for="ItemName" class="form-control" />
                    <span asp-validation-for="ItemName" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Description" class="form-label"></label>
                    <textarea asp-for="Description" class="form-control"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="SKU" class="form-label"></label>
                    <div class="input-group">
                        <input asp-for="SKU" class="form-control" readonly />
                        <button type="button" class="btn btn-secondary" id="generateSkuBtn">Generate SKU</button>
                    </div>
                    <span asp-validation-for="SKU" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Quantity" class="form-label"></label>
                    <input asp-for="Quantity" class="form-control" type="number" />
                    <span asp-validation-for="Quantity" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="ReorderLevel" class="form-label"></label>
                    <input asp-for="ReorderLevel" class="form-control" type="number" />
                    <span asp-validation-for="ReorderLevel" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="SellingPrice" class="form-label"></label>
                    <input asp-for="SellingPrice" class="form-control" type="number" step="0.01" />
                    <span asp-validation-for="SellingPrice" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="CostPrice" class="form-label"></label>
                    <input asp-for="CostPrice" class="form-control" type="number" step="0.01" />
                    <span asp-validation-for="CostPrice" class="text-danger"></span>
                </div>
                <div class="form-check mb-3">
                    <input asp-for="IsActive" class="form-check-input" />
                    <label asp-for="IsActive" class="form-check-label"></label>
                </div>
                <button type="submit" class="btn btn-primary"><i class="fas fa-save me-2"></i>Save</button>
                <a asp-action="Index" class="btn btn-secondary"><i class="fas fa-arrow-left me-2"></i>Back to List</a>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('generateSkuBtn').addEventListener('click', function() {
            var itemName = document.getElementById('ItemName').value;
            if (itemName.length > 0) {
                // You will need an AJAX call to the server to generate a truly unique SKU
                // For now, let's use a simple client-side version for the demo.
                // Replace with a call to your InventoryService.GenerateSku() method via AJAX later.
                var randomPart = Math.random().toString(36).substring(2, 7).toUpperCase();
                var prefix = itemName.substring(0, 3).toUpperCase();
                document.getElementById('SKU').value = prefix + '-' + randomPart;
            } else {
                alert('Please enter an Item Name first.');
            }
        });
    </script>
}